generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  googleId  String    @unique
  email     String    @unique
  name      String
  firstName String
  lastName  String
  picture   String
  role      Role      @default(user)
  sessions  Session[]
  wishes    Wish[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Campaign {
  id        String   @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  startWishSelection DateTime
  endWishSelection DateTime
  wishes    Wish[]
}

model Wish {
  id           String       @id @default(uuid())
  userId       String
  campaignId   String
  familyStatus FamilyStatus
  childrenCount Int          // Nombre d'enfants
  
  // Relations nommées pour chaque vœu
  wish1        WishDate[]    @relation("wish1_dates") // Liens vers plusieurs dates pour le vœu 1
  wish2        WishDate[]    @relation("wish2_dates") // Liens vers plusieurs dates pour le vœu 2
  wish3        WishDate[]    @relation("wish3_dates") // Liens vers plusieurs dates pour le vœu 3
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign     Campaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model WishDate {
  id       String   @id @default(uuid())
  date     DateTime
  
  // Relations inverses avec Wish pour chaque vœu
  wish1    Wish?    @relation("wish1_dates", fields: [wish1Id], references: [id])
  wish1Id  String?

  wish2    Wish?    @relation("wish2_dates", fields: [wish2Id], references: [id])
  wish2Id  String?

  wish3    Wish?    @relation("wish3_dates", fields: [wish3Id], references: [id])
  wish3Id  String?
}

enum Role {
  user
  admin
}

enum FamilyStatus {
  isolated
  family
}
