



const data: HolidayWishesRow[] = [
  {
    id: "...",
    situation: "pending",
    firstname: "Claude",
    lastname: "Dupont",
    email: "ken99@yahoo.com",
    children: 12,
    wish1: ["2022-01-01", "2022-01-02"],
    wish2: ["2022-01-03", "2022-01-04"],
    wish3: ["2022-01-05", "2026-01-06"],
  },
];

export type HolidayWishesRow = {
  id: string;
  situation: string;
  firstname: string;
  lastname: string;
  email: string;
  children: number;
  wish1: string[];
  wish2: string[];
  wish3: string[];
};

export const columns: ColumnDef<HolidayWishesRow>[] = [
  {
    accessorKey: "firstname",
    header: ({ column }) => {
      return (
        <Button
          className="px-0 py-0"
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
        >
          Prénom
        </Button>
      );
    },
    cell: ({ row }) => (
      <div className="capitalize">{row.getValue("firstname")}</div>
    ),
  },
  {
    accessorKey: "lastname",
    header: ({ column }) => {
      return (
        <Button
          className="px-0 py-0"
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
        >
          Nom
        </Button>
      );
    },
    cell: ({ row }) => (
      <div className="capitalize">{row.getValue("lastname")}</div>
    ),
  },
  {
    accessorKey: "email",
    header: ({ column }) => {
      return (
        <Button
          className="px-0 py-0"
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
        >
          Email
        </Button>
      );
    },
    cell: ({ row }) => <div className="lowercase">{row.getValue("email")}</div>,
  },
  {
    accessorKey: "situation",
    header: ({ column }) => {
      return (
        <Button
          className="px-0 py-0"
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
        >
          Situation
        </Button>
      );
    },
    cell: ({ row }) => (
      <div className="lowercase">{row.getValue("situation")}</div>
    ),
  },
  {
    accessorKey: "children",
    header: ({ column }) => {
      return (
        <Button
          className="px-0 py-0"
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
        >
          Nb. d'enfants
        </Button>
      );
    },
    cell: ({ row }) => (
      <div className="lowercase">{row.getValue("children")}</div>
    ),
  },
  {
    accessorKey: "wish1",
    header: () => {
      return <>Voeu N°1</>;
    },
    cell: ({ row }) => (
      <Dialog>
        <DialogTrigger asChild>
          <Button
            variant="outline"
            size="sm"
            className="text-xs h-6 px-2.5 my-1.5"
          >
            Voir les dates
          </Button>
        </DialogTrigger>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle className="text-lg font-semibold">
              Liste des dates sélectionnées par {row.getValue("firstname")}{" "}
              {row.getValue("lastname")} pour le voeu n°1
            </DialogTitle>
          </DialogHeader>
          <table className="min-w-full divide-y divide-zinc-200">
            <thead>
              <tr>
                <th
                  scope="col"
                  className="px-4 py-2 text-left text-xs font-semibold text-black uppercase tracking-wider"
                >
                  Date
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-zinc-200">
              {(row.getValue("wish1") as string[]).map(
                (date: string, index) => (
                  <tr key={index}>
                    <td className="px-4 py-2 whitespace-nowrap text-xs text-zinc-500">
                      {new Date(date).toLocaleDateString("fr-FR", {
                        day: "2-digit",
                        month: "2-digit",
                        year: "numeric",
                      })}
                    </td>
                  </tr>
                )
              )}
            </tbody>
          </table>
        </DialogContent>
      </Dialog>
    ),
  },
  {
    accessorKey: "wish2",
    header: () => {
      return <>Voeu N°2</>;
    },
    cell: ({ row }) => (
      <Dialog>
        <DialogTrigger asChild>
          <Button
            variant="outline"
            size="sm"
            className="text-xs h-6 px-2.5 my-1.5"
          >
            Voir les dates
          </Button>
        </DialogTrigger>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle className="text-lg font-semibold">
              Liste des dates sélectionnées par {row.getValue("firstname")}{" "}
              {row.getValue("lastname")} pour le voeu n°2
            </DialogTitle>
          </DialogHeader>
          <table className="min-w-full divide-y divide-zinc-200">
            <thead>
              <tr>
                <th
                  scope="col"
                  className="px-4 py-2 text-left text-xs font-semibold text-black uppercase tracking-wider"
                >
                  Date
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-zinc-200">
              {(row.getValue("wish2") as string[]).map(
                (date: string, index) => (
                  <tr key={index}>
                    <td className="px-4 py-2 whitespace-nowrap text-xs text-zinc-500">
                      {new Date(date).toLocaleDateString("fr-FR", {
                        day: "2-digit",
                        month: "2-digit",
                        year: "numeric",
                      })}
                    </td>
                  </tr>
                )
              )}
            </tbody>
          </table>
        </DialogContent>
      </Dialog>
    ),
  },
  {
    accessorKey: "wish3",
    header: () => {
      return <>Voeu N°3</>;
    },
    cell: ({ row }) => (
      <Dialog>
        <DialogTrigger asChild>
          <Button
            variant="outline"
            size="sm"
            className="text-xs h-6 px-2.5 my-1.5"
          >
            Voir les dates
          </Button>
        </DialogTrigger>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle className="text-lg font-semibold">
              Liste des dates sélectionnées par {row.getValue("firstname")}{" "}
              {row.getValue("lastname")} pour le voeu n°3
            </DialogTitle>
          </DialogHeader>
          <table className="min-w-full divide-y divide-zinc-200">
            <thead>
              <tr>
                <th
                  scope="col"
                  className="px-4 py-2 text-left text-xs font-semibold text-black uppercase tracking-wider"
                >
                  Date
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-zinc-200">
              {(row.getValue("wish3") as string[]).map(
                (date: string, index) => (
                  <tr key={index}>
                    <td className="px-4 py-2 whitespace-nowrap text-xs text-zinc-500">
                      {new Date(date).toLocaleDateString("fr-FR", {
                        day: "2-digit",
                        month: "2-digit",
                        year: "numeric",
                      })}
                    </td>
                  </tr>
                )
              )}
            </tbody>
          </table>
        </DialogContent>
      </Dialog>
    ),
  },
];

const UserHolidayWishlistCard = () => {
  const [sorting, setSorting] = React.useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  );
  const [columnVisibility, setColumnVisibility] =
    React.useState<VisibilityState>({});
  const [rowSelection, setRowSelection] = React.useState({});

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
  });
  return (
    <div className="flex flex-col p-5 leading-6 text-black bg-white rounded-xl border border-gray-200 border-solid">
      <div className="flex justify-between items-center text-black">
        <h2 className="inline-block m-0 font-semibold text-black">
          Voeux de congès par utilisateur
        </h2>
        <ExportButton data={data} />
      </div>
      <div className="w-full">
        <div className="flex items-center py-4">
          <Input
            placeholder="Rechercher un collaborateur (email, prénom, nom, situation, nombre d'enfants)"
            value={table.getState().globalFilter ?? ""}
            onChange={(event) => {
              table.setGlobalFilter(event.target.value);
            }}
          />
        </div>

        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  return (
                    <TableHead key={header.id}>
                      {header.isPlaceholder
                        ? null
                        : flexRender(
                            header.column.columnDef.header,
                            header.getContext()
                          )}
                    </TableHead>
                  );
                })}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  data-state={row.getIsSelected() && "selected"}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={columns.length}
                  className="h-24 text-center"
                >
                  Aucun résultat trouvé
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>

        <div className="flex items-center justify-end space-x-2 py-4">
          <p className="flex-1 text-[0.7rem] sm:text-sm text-muted-foreground leading-4">
            Page{" "}
            <span className="font-semibold">
              {table.getState().pagination.pageIndex + 1}
            </span>{" "}
            sur <span className="font-semibold">{table.getPageCount()}</span> -{" "}
            <span className="font-semibold">
              {table.getRowModel().rows.length}
            </span>{" "}
            ligne(s) par page.
          </p>
          <div className="space-x-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => table.previousPage()}
              disabled={!table.getCanPreviousPage()}
            >
              Précédent
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => table.nextPage()}
              disabled={!table.getCanNextPage()}
            >
              Suivant
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default UserHolidayWishlistCard;

